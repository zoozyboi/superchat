{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messageRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","className","src","App","useAuthState","user","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAYAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAEjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAiB3B,SAASC,IAKP,OACE,wBAAQC,QALe,WACvB,IAAMC,EAAW,IAAIb,IAASS,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAGrB,kCAGJ,SAASG,IACP,OAAOP,EAAKQ,aACV,mCACA,wBAAQL,QAAS,kBAAMH,EAAKS,WAA5B,wBAMJ,SAASC,IACP,IAAMC,EAAQC,mBACTC,EAAaZ,EAAUa,WAAW,WAClCC,EAAQF,EAAWG,QAAQ,aAAaC,MAAM,IACpD,EAAoBC,YAAkBH,EAAO,CAACI,QAAS,OAAhDC,EAAP,oBAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEQ3B,EAAKQ,YAAvBoB,EAFU,EAEVA,IAAKC,EAFK,EAELA,SAFK,SAIZhB,EAAWiB,IAAI,CACpBC,KAAMT,EACNU,UAAWzC,IAASU,UAAUgC,WAAWC,kBACzCN,MACAC,aARiB,OAUlBN,EAAa,IAEbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAZvB,2CAAH,sDAcjB,OACE,qCACA,iCACCjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA2BC,QAASF,GAAjBA,EAAIG,OACxD,qBAAKC,IAAKhC,OAIT,uBAAMiC,SAAUpB,EAAhB,UAEA,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,UAChE,wBAAQG,KAAK,SAAb,wBAOJ,SAASR,EAAYS,GACnB,MAA0CA,EAAMR,QAAxCV,EAAR,EAAQA,KAAMH,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,SAAnB,EAA4BG,UACChC,EAAKQ,YAAYoB,IAC9C,OACE,sBAAKsB,UAAW,2BAAhB,UACA,qBAAKC,IAAKtB,IACV,4BAAIE,OAMOqB,MApFf,WACE,MAAcC,YAAarD,GAArBsD,EAAN,oBACA,OACE,sBAAKJ,UAAU,MAAf,UACE,mCACE,mBAAGK,KAAK,yBAAR,0BAEA,cAAChD,EAAD,OAEF,kCACG+C,EAAO,cAAC5C,EAAD,IAAc,cAACR,EAAD,UCtBfsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.becbd9d3.chunk.js","sourcesContent":["import React from 'react';\nimport {useState } from 'react'; \nimport {useRef } from 'react'; \nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { div } from 'prelude-ls';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyChZGne87r6umIM71CGqFaEt33Bu69jcCo\",\n  authDomain: \"simple-chatroom-2f43e.firebaseapp.com\",\n  projectId: \"simple-chatroom-2f43e\",\n  storageBucket: \"simple-chatroom-2f43e.appspot.com\",\n  messagingSenderId: \"738274598003\",\n  appId: \"1:738274598003:web:d25394adf7c1fc72d81e06\",\n  measurementId: \"G-FMN4E7PQHQ\"\n})\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const[user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header>\n        <a href=\"http://localhost:3001/\">ðŸ’¬</a>\n      \n        <SignOut />\n      </header>\n      <section>\n        {user ? <ChatRoom />: <SignIn />}\n      </section>\n    </div>\n  );\n}\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return(\n    <button onClick={signInWithGoogle}>Sign in with Google </button>\n  )\n}\nfunction SignOut() {\n  return auth.currentUser && (\n    <>\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n    </>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n const messageRef = firestore.collection('message');\n const query = messageRef.orderBy('createdAt').limit(25);\n const [messages]  = useCollectionData(query, {idField: 'id'});\n\n const [formValue, setFormValue] = useState('');\n const sendMessage = async(e) => {\n   e.preventDefault();\n   const { uid, photoURL } = auth.currentUser;\n   \n   await messageRef.add({\n    text: formValue,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    uid,\n    photoURL\n   }); \n   setFormValue('');\n\n   dummy.current.scrollIntoView({ behavior: 'smooth'});\n }\n return (\n   <>\n   <main>\n   {messages && messages.map(msg => <ChatMessage key ={msg.id} message={msg} />)}\n   <div ref={dummy}></div>\n   </main>\n\n \n    <form onSubmit={sendMessage}>\n\n    <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n    <button type=\"submit\">SEND</button>\n  \n    </form>\n    </>\n\n )\n}\nfunction ChatMessage(props) {\n  const { text, uid, photoURL,createdAt } = props.message;\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  return(\n    <div className={'message ${messagesClass}'}>\n    <img src={photoURL}/>\n    <p>{text}</p>\n    \n  </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}